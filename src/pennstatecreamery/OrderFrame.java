/*
 * 
 * OrderFrame
 * Main jFrame for handling Customer Orders
 * 
 */
package pennstatecreamery;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class OrderFrame extends javax.swing.JFrame {
    DataBase db;
    DBValues dbV;
    CustomerOrder co;
    Customer c;
    /**
     * Creates new form OrderFrame
     */
    public OrderFrame(DataBase db, DBValues dbV, CustomerOrder co, Customer c) {
        initComponents();
        this.db = db;
        this.dbV = dbV;
        this.co = co;
        this.c = c;
    }
    //Container Variables
    private String containerSelection = "Container", coneType = "";

    //Ice-Cream Variables
    private String iceCreamSelection = "Ice Cream", creamType = "";
    
    //Topping Variables
    private String toppingSelection = "Topping", toppingType = ""; 
    
    //Special Variables
    private String specialSelection = "Specialty", specialType = "";     
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerBox = new javax.swing.JComboBox();
        toppingPriceField = new javax.swing.JTextField();
        iceCreamPriceField = new javax.swing.JTextField();
        toppingBox = new javax.swing.JComboBox();
        totalPriceField = new javax.swing.JTextField();
        totalPriceLabel = new javax.swing.JLabel();
        iceCreamBox = new javax.swing.JComboBox();
        managerButton = new javax.swing.JButton();
        createOrderButton = new javax.swing.JButton();
        containerPriceField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        orderPanel = new NewImage();
        containerButton = new javax.swing.JButton();
        toppingButton = new javax.swing.JButton();
        icecreamButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        containerBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Container", "Sugar Cone", "Waffle Cone" }));
        containerBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containerBoxActionPerformed(evt);
            }
        });

        toppingPriceField.setEditable(false);
        toppingPriceField.setFocusable(false);
        toppingPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toppingPriceFieldActionPerformed(evt);
            }
        });

        iceCreamPriceField.setEditable(false);
        iceCreamPriceField.setFocusable(false);
        iceCreamPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iceCreamPriceFieldActionPerformed(evt);
            }
        });

        toppingBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Topping", "Sprinkles", "Hot-Fudge" }));
        toppingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toppingBoxActionPerformed(evt);
            }
        });

        totalPriceField.setEditable(false);
        totalPriceField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalPriceField.setFocusable(false);
        totalPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalPriceFieldActionPerformed(evt);
            }
        });

        totalPriceLabel.setText("Current Order Price:");

        iceCreamBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ice Cream", "Chocolate", "Vanilla", "Strawberry" }));
        iceCreamBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iceCreamBoxActionPerformed(evt);
            }
        });

        managerButton.setText("Manager Tools");
        managerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerButtonActionPerformed(evt);
            }
        });

        createOrderButton.setText("Create Order");
        createOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrderButtonActionPerformed(evt);
            }
        });

        containerPriceField.setEditable(false);
        containerPriceField.setFocusable(false);
        containerPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containerPriceFieldActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel Order");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        orderPanel.setBackground(new java.awt.Color(255, 255, 255));
        orderPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        orderPanel.setOpaque(true);

        javax.swing.GroupLayout orderPanelLayout = new javax.swing.GroupLayout(orderPanel);
        orderPanel.setLayout(orderPanelLayout);
        orderPanelLayout.setHorizontalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        orderPanelLayout.setVerticalGroup(
            orderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 182, Short.MAX_VALUE)
        );

        containerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pennstatecreamery/resources/psu.png"))); // NOI18N
        containerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containerButtonActionPerformed(evt);
            }
        });

        toppingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pennstatecreamery/resources/psu.png"))); // NOI18N
        toppingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toppingButtonActionPerformed(evt);
            }
        });

        icecreamButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pennstatecreamery/resources/psu.png"))); // NOI18N
        icecreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icecreamButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(iceCreamBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icecreamButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(managerButton)
                    .addComponent(iceCreamPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(toppingButton)
                        .addComponent(toppingBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toppingPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(containerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(containerBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(containerPriceField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(createOrderButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(totalPriceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalPriceLabel)
                    .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toppingBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(containerBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iceCreamBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(toppingButton)
                            .addComponent(containerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icecreamButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iceCreamPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toppingPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(containerPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(managerButton)
                    .addComponent(createOrderButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void containerBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containerBoxActionPerformed
            containerSelection = (String)containerBox.getSelectedItem().toString();
            
            if(containerSelection.matches("Container")){
                containerPriceField.setText("");
            }else{
                containerPriceField.setText("$"+db.checkItemPrice(containerSelection));
                db.setItemPrices(co, "Container");
            }
            
        if(containerSelection.matches("Sugar Cone")){
            containerButton.setIcon(new javax.swing.ImageIcon("images/cone.png"));
        }else if(containerSelection.matches("Waffle Cone")){
            containerButton.setIcon(new javax.swing.ImageIcon("images/waffle.png"));
        }else{
            containerButton.setIcon(new javax.swing.ImageIcon("images/psu.png"));
        }
        coneType = containerSelection;
    }//GEN-LAST:event_containerBoxActionPerformed

    private void toppingPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toppingPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toppingPriceFieldActionPerformed

    private void iceCreamPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iceCreamPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iceCreamPriceFieldActionPerformed

    private void toppingBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toppingBoxActionPerformed
            toppingSelection = (String)toppingBox.getSelectedItem().toString();
            
            if(toppingSelection.matches("Topping")){
                toppingPriceField.setText("");
            }else{
                toppingPriceField.setText("$"+db.checkItemPrice(toppingSelection));
                db.setItemPrices(co, "Topping");
            }
            
        if(toppingSelection.matches("Sprinkles")){
            toppingButton.setIcon(new javax.swing.ImageIcon("images/sprinkle.png"));
        }else if(toppingSelection.matches("Hot-Fudge")){
            toppingButton.setIcon(new javax.swing.ImageIcon("images/fudge.png"));
        }else{
            toppingButton.setIcon(new javax.swing.ImageIcon("images/psu.png"));
        }
        toppingType = toppingSelection;
    }//GEN-LAST:event_toppingBoxActionPerformed

    private void totalPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalPriceFieldActionPerformed

    private void iceCreamBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iceCreamBoxActionPerformed
            iceCreamSelection = (String)iceCreamBox.getSelectedItem().toString();
            
            if(iceCreamSelection.matches("Ice Cream")){
                iceCreamPriceField.setText("");
            }else{
                iceCreamPriceField.setText("$"+db.checkItemPrice(iceCreamSelection));
                db.setItemPrices(co, "Ice Cream");   
            }
            
        if(iceCreamSelection.matches("Chocolate")){
            icecreamButton.setIcon(new javax.swing.ImageIcon("images/choc.png"));
        }else if(iceCreamSelection.matches("Vanilla")){
            icecreamButton.setIcon(new javax.swing.ImageIcon("images/vanilla.png"));
        }else if(iceCreamSelection.matches("Strawberry")){
            icecreamButton.setIcon(new javax.swing.ImageIcon("images/strawberry.png"));
        }else{
            icecreamButton.setIcon(new javax.swing.ImageIcon("images/psu.png"));
        }
        creamType = iceCreamSelection;
    }//GEN-LAST:event_iceCreamBoxActionPerformed

    private void containerPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containerPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_containerPriceFieldActionPerformed

    private void createOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrderButtonActionPerformed

        if(Double.parseDouble(co.getTotalPrice()) > 0){
            c.setBalance(Double.parseDouble(co.getTotalPrice()));
            db.updateCustomerBalance(c, c.getUserPin());
            setVisible(false);
            ReceiptFrame receiptFrame = new ReceiptFrame(db, dbV, co, c);
            receiptFrame.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null,"No items have been added to your order!\nCannot create order.","Order Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_createOrderButtonActionPerformed

    private void managerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerButtonActionPerformed
        setVisible(false);
        ManagerFrame managerFrame = new ManagerFrame(db, dbV, co, c);
        
        managerFrame.setVisible(true);
    }//GEN-LAST:event_managerButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        PennStateCreamery customerFrame;
        try {
            customerFrame = new PennStateCreamery();
            customerFrame.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void containerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containerButtonActionPerformed
        if(!containerSelection.matches("Container")){
            try {
                db.removeStock(containerSelection);
                co.addContainer(containerSelection.toString());
                addContainerImage();   
                totalPriceField.setText("$"+co.getTotalPrice());
            } catch (SQLException ex) {
                Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"No Container selected, please select a Container.","Container Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_containerButtonActionPerformed

    private void addContainerImage(){
        if(coneType.equals("Sugar Cone")){
            ((NewImage)orderPanel).IceCreamImage("images\\cone.png","container");
        }else{
            ((NewImage)orderPanel).IceCreamImage("images\\waffle.png","container");
        }       
    }    
    
    private void toppingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toppingButtonActionPerformed
       if(!toppingSelection.matches("Topping")){
           try {
               db.removeStock(toppingSelection);
               co.addTopping(toppingSelection.toString());
               addToppingImage();
                totalPriceField.setText("$"+co.getTotalPrice());
           } catch (SQLException ex) {
               Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
           } catch (ClassNotFoundException ex) {
               Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
       }else{
           JOptionPane.showMessageDialog(null,"No Topping selected, please select a Topping.","Topping Error", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_toppingButtonActionPerformed

    private void addToppingImage(){
        if(toppingType.equals("Sprinkles")){
            ((NewImage)orderPanel).IceCreamImage("images\\sprinkle.png","topping");
        }else{
            ((NewImage)orderPanel).IceCreamImage("images\\fudge.png","topping");
        }       
    }  

    
    private void icecreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_icecreamButtonActionPerformed
       if(!iceCreamSelection.matches("Ice Cream")){
           try {
               db.removeStock(iceCreamSelection);
               co.addIceCream(iceCreamSelection.toString());
               addIceCreamImage();
               totalPriceField.setText("$"+co.getTotalPrice());
           } catch (SQLException ex) {
               Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
           } catch (ClassNotFoundException ex) {
               Logger.getLogger(OrderFrame.class.getName()).log(Level.SEVERE, null, ex);
           }
       }else{
           JOptionPane.showMessageDialog(null,"No Ice Cream selected, please select an Ice Cream.","Ice Cream Error", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_icecreamButtonActionPerformed

    private void addIceCreamImage(){
        if(creamType.equals("Chocolate")){
            ((NewImage)orderPanel).IceCreamImage("images\\choc.png","icecream");
        }else if(creamType.equals("Vanilla")){
            ((NewImage)orderPanel).IceCreamImage("images\\vanilla.png","icecream");
        }else{
            ((NewImage)orderPanel).IceCreamImage("images\\strawberry.png","icecream");
        }
        
    }   
    
    private void addSpecialImage(){
        if(specialType.equals("Specialty") || specialType.matches("")){
            JOptionPane.showMessageDialog(null,"No Specialty Item selected, please select a Specialty Item.","Specialty Item Error", JOptionPane.ERROR_MESSAGE);
        }else if(specialType.equals("Sundae")){
            ((NewImage)orderPanel).IceCreamImage("images\\sundae.png","special");
        }else if(specialType.equals("Banana Split")){
            ((NewImage)orderPanel).IceCreamImage("images\\split.png","special");
        }else{
            ((NewImage)orderPanel).IceCreamImage("images\\strawberry.png","special");
        }       
    }    
    
    /**
     * @param args the command line arguments
     */

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox containerBox;
    private javax.swing.JButton containerButton;
    private javax.swing.JTextField containerPriceField;
    private javax.swing.JButton createOrderButton;
    private javax.swing.JComboBox iceCreamBox;
    private javax.swing.JTextField iceCreamPriceField;
    private javax.swing.JButton icecreamButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton managerButton;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JComboBox toppingBox;
    private javax.swing.JButton toppingButton;
    private javax.swing.JTextField toppingPriceField;
    private javax.swing.JTextField totalPriceField;
    private javax.swing.JLabel totalPriceLabel;
    // End of variables declaration//GEN-END:variables
}
